#region	License
//------------------------------------------------------------------------------------------------
// <License>
//     <Copyright> 2017 © Top Nguyen → AspNetCore → Monkey </Copyright>
//     <Url> http://topnguyen.net/ </Url>
//     <Author> Top </Author>
//     <Project> Monkey → Business Interface </Project>
//     <File>
//         <Name> IAuthenticationBusiness.cs </Name>
//         <Created> 13/09/17 10:47:20 PM </Created>
//         <Key> 0b6435fb-3d3a-4fe1-ae17-a9703a45d61f </Key>
//     </File>
//     <Summary>
//         IAuthenticationBusiness.cs
//     </Summary>
// <License>
//------------------------------------------------------------------------------------------------
#endregion License

using Monkey.Core.Models.Auth;
using System;
using System.Threading.Tasks;

namespace Monkey.Business.Auth
{
    public interface IAuthenticationBusiness : IBaseBusiness
    {
        #region SignIn

        /// <summary>
        ///     Check user name and password is correct, not banned and already active 
        /// </summary>
        /// <param name="userName"></param>
        /// <param name="password"></param>
        /// m
        void CheckValidSignIn(string userName, string password);

        LoggedInUserModel SignIn(string username, string password, out string refreshToken, int? clientId);

        #endregion

        #region Get Logged In User

        Task<LoggedInUserModel> GetLoggedInUserBySubjectAsync(string subject);

        Task<LoggedInUserModel> GetLoggedInUserByRefreshTokenAsync(string refreshToken);

        #endregion

        #region Refresh Token

        /// <summary>
        ///     Expire all refresh token generated by sign in action, this method make user must sign
        ///     in again
        /// </summary>
        /// <param name="subject"></param>
        /// <returns></returns>
        Task ExpireAllRefreshTokenAsync(string subject);

        /// <summary>
        ///     Check refresh token is exist and not expire 
        /// </summary>
        /// <param name="clientId">    </param>
        /// <param name="refreshToken"></param>
        void CheckValidRefreshToken(string refreshToken, int? clientId);

        #endregion

        #region Confirm Email

        string GenerateTokenConfirmEmail(string userSubject, string email, out TimeSpan expireIn);

        bool IsExpireOrInvalidSetPasswordToken(string token);

        /// <summary>
        ///     Active user via email, setup new username and password 
        /// </summary>
        /// <param name="subject">    </param>
        /// <param name="newUserName"></param>
        /// <param name="newPassword"></param>
        /// <returns></returns>
        Task ConfirmEmailAsync(string subject, string newUserName, string newPassword);

        void ExpireTokenConfirmEmail(string token);

        #endregion

        #region Confirm Phone

        string GenerateTokenConfirmPhone(string userSubject, string phone, out TimeSpan expireIn);

        Task ConfirmPhoneAsync(string subject, string newUserName, string newPassword);

        void ExpireTokenConfirmPhone(string token);

        #endregion

        #region Set Password

        bool IsExpireOrInvalidConfirmEmailToken(string token);

        string GenerateTokenSetPassword(string userSubject, string email, out TimeSpan expireIn);

        Task SetPasswordAsync(string subject, string password);

        void ExpireTokenSetPassword(string token);

        #endregion

        void CheckCurrentPassword(string currentPassword);
    }
}