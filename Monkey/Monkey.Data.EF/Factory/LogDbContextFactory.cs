#region	License

//------------------------------------------------------------------------------------------------
// <Auto-generated>
//     <Author> Top Nguyen (http://topnguyen.net) </Author>
//     <Project> Monkey.Data.EF.Factory </Project>
//     <File> 
//         <Name> LogDbContextFactory.cs </Name>
//         <Created> 28 03 2017 05:50:31 PM </Created>
//         <Key> 0679F181-B40B-49BF-A6A6-1AFA54A83376 </Key>
//     </File>
//     <Summary>
//         LogDbContextFactory
//     </Summary>
// </Auto-generated>
//------------------------------------------------------------------------------------------------

#endregion License

using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;
using Monkey.Core.Configs;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Puppy.Core.ConfigUtils;

namespace Monkey.Data.EF.Factory
{
    public class LogDbContextFactory : IDesignTimeDbContextFactory<LogDbContext>
    {
        public LogDbContext CreateDbContext(string[] args)
        {
            var builder = new DbContextOptionsBuilder<LogDbContext>();

            builder.UseSqlServer(GetConnectionString(), ConfigOptionBuilder);

            return new LogDbContext(builder.Options);
        }

        public static DbContextOptionsBuilder GetLogDbContextBuilder(DbContextOptionsBuilder builder = null)
        {
            builder = builder ?? new DbContextOptionsBuilder();

            builder.UseSqlServer(GetConnectionString(), ConfigOptionBuilder);

            return builder;
        }

        public static void ConfigOptionBuilder(SqlServerDbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.MigrationsAssembly(GetMigrationAssemblyName());

            // Enable use Row No for Paging is needed unless you are on MSSQL 2012 or higher
            optionsBuilder.UseRowNumberForPaging(useRowNumberForPaging: false);
        }

        /// <summary>
        ///     Return connection string of current environment and machine
        /// </summary>
        /// <returns></returns>
        public static string GetConnectionString()
        {
            if (!string.IsNullOrWhiteSpace(SystemConfig.LogDatabaseConnectionString))
            {
                return SystemConfig.LogDatabaseConnectionString;
            }

            IConfigurationRoot config = new ConfigurationBuilder().AddJsonFile(Puppy.Core.Constants.Configuration.AppSettingsJsonFileName, false, true).Build();
            var connectionString = config.GetValueByMachineAndEnv<string>("LogConnectionStrings");
            return connectionString;
        }

        public static Assembly GetMigrationAssembly()
        {
            return typeof(IDatabase).GetTypeInfo().Assembly;
        }

        public static string GetMigrationAssemblyName()
        {
            return typeof(IDatabase).GetTypeInfo().Assembly.GetName().Name;
        }
    }
}