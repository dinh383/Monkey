#region	License

//------------------------------------------------------------------------------------------------
// <Auto-generated>
//     <Author> Top Nguyen (http://topnguyen.net) </Author>
//     <Project> Monkey.Data.EF.Factory </Project>
//     <File> 
//         <Name> DbContextFactory.cs </Name>
//         <Created> 28 03 2017 05:50:31 PM </Created>
//         <Key> 0679F181-B40B-49BF-A6A6-1AFA54A83376 </Key>
//     </File>
//     <Summary>
//         DbContextFactory
//     </Summary>
// </Auto-generated>
//------------------------------------------------------------------------------------------------

#endregion License

using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.Extensions.Configuration;
using Monkey.Core.Configs;
using Puppy.Core;
using Puppy.Core.ConfigUtils;
using Puppy.Core.EnvironmentUtils;

namespace Monkey.Data.EF.Factory
{
    public class DbContextFactory : IDbContextFactory<DbContext>
    {
        public DbContext Create(DbContextFactoryOptions options)
        {
            return CreateCoreContext();
        }

        public static DbContext CreateCoreContext()
        {
            var builder = new DbContextOptionsBuilder<DbContext>();

            builder.UseSqlServer();

            return new DbContext(builder.Options);
        }

        /// <summary>
        ///     Return connection string of current environment and machine
        /// </summary>
        /// <returns></returns>
        public static string GetConnectionString()
        {
            if (!string.IsNullOrWhiteSpace(SystemConfig.DatabaseConnectionString))
            {
                return SystemConfig.DatabaseConnectionString;
            }

            IConfigurationRoot config = new ConfigurationBuilder().AddJsonFile(Puppy.Core.Constants.Configuration.AppSettingsJsonFileName, false, true).Build();
            var connectionString = config.GetValueByMachineAndEnv<string>(Puppy.Core.Constants.Configuration.ConnectionStringsConfigSection);
            return connectionString;
        }

        public static Assembly GetMigrationAssembly()
        {
            return typeof(IDatabase).GetTypeInfo().Assembly;
        }

        public static string GetMigrationAssemblyName()
        {
            return typeof(IDatabase).GetTypeInfo().Assembly.GetName().Name;
        }
    }
}