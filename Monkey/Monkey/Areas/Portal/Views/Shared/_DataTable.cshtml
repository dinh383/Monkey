@using Newtonsoft.Json.Linq
@using Puppy.DataTable.Constants
@using Puppy.DataTable.Models.Config
@using Puppy.DataTable.Utils.Extensions
@model DataTableModel

<table id="@Model.Id" class="@(Model.TableClass ?? string.Empty)">
    <thead>
        @if (Model.IsUseColumnFilter)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th>@column.DisplayName</th>
                }
            </tr>
        }
        @if (!Model.IsHideHeader)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th class="@column.CssClassHeader">@column.DisplayName</th>
                }
            </tr>
        }
    </thead>
    <tbody>
        <tr>
            <td colspan="@Model.Columns.Count" class="dataTables_empty">
                Loading...
            </td>
        </tr>
    </tbody>
</table>

<script type="text/javascript">
    (function initDataTable() {
        if (!window.jQuery || !$.fn.DataTable) {
            setTimeout(initDataTable, 100);
            return;
        }
        var $table = $('#@Model.Id');
        @{
            var options = new JObject
            {
                [PropertyConst.Sorting] = new JRaw(Model.GetColumnSortingString()),
                [PropertyConst.IsProcessing] = true,
                [PropertyConst.IsServerSide] = true,
                [PropertyConst.IsFilter] = Model.IsShowGlobalSearchInput,
                [PropertyConst.Dom] = Model.Dom,
                [PropertyConst.IsResponsive] = Model.IsResponsive,
                [PropertyConst.IsAutoWidth] = Model.IsAutoWidthColumn,
                [PropertyConst.AjaxSource] = Model.AjaxUrl,
                [PropertyConst.ColumnDefine] = new JRaw(Model.GetColumnsJsonString()),
                [PropertyConst.SearchCols] = Model.GetSearchColumns(),
                [PropertyConst.DeferRender] = Model.IsDeferRender,
                [PropertyConst.LengthMenuDefine] = Model.LengthMenu != null ? new JRaw(Model.LengthMenu) : new JRaw(string.Empty),
                [PropertyConst.Language] = new JObject
                {
                    [PropertyConst.SearchSelector] = "_INPUT_",
                    [PropertyConst.LengthMenuSelector] = "_MENU_",
                    [PropertyConst.SearchPlaceholder] = "Search...",
                }
            };

            // Default Size
            if (Model.PageSize.HasValue)
            {
                options[PropertyConst.DisplayLength] = Model.PageSize;
            }

            // Language Code
            if (!string.IsNullOrWhiteSpace(Model.LanguageCode))
            {
                options[PropertyConst.LanguageCode] = new JRaw(Model.LanguageCode);
            }

            // Draw Call back function
            if (!string.IsNullOrWhiteSpace(Model.DrawCallbackFunctionName))
            {
                options[PropertyConst.FnDrawCallback] = new JRaw(Model.DrawCallbackFunctionName);
            }

            // Server Request
            options[PropertyConst.FnServerData] = new JRaw(
                "function(sSource, aoData, fnCallback) { "
                + (Model.IsDevelopMode ? "    console.log('[DataTable] URL: ', sSource);" : string.Empty)
                + (Model.IsDevelopMode ? "    console.log('[DataTable] Request: ', aoData);" : string.Empty)
                + "    var ajaxOptions = { 'dataType': 'json', 'type': 'POST', 'url': sSource, 'data': aoData, 'success': fnCallback};"
                + (Model.IsDevelopMode ? "ajaxOptions['success'] = function(data){"
                                              + "    console.log('[DataTable] Response', data);"
                                              + "    if(fnCallback && typeof fnCallback === 'function'){"
                                              + "        fnCallback(data)"
                                              + "    }"
                                              + "};"
                                       : string.Empty)
                + (string.IsNullOrWhiteSpace(Model.BeforeSendFunctionName) ? string.Empty : $"{Model.BeforeSendFunctionName}(aoData);")
                + (string.IsNullOrWhiteSpace(Model.AjaxErrorHandler) ? string.Empty : "ajaxOptions['error'] = " + Model.AjaxErrorHandler + "; ")
                + "    $.ajax(ajaxOptions);" +
                "}");

            // Tools
            if (Model.IsUseTableTools)
            {
                options[PropertyConst.TableTools] = new JRaw("{ 'sSwfPath': '" + Url.AbsoluteContent("~/portal/vendor/datatables-tabletools/swf/copy_csv_xls_pdf.swf") + "' }");

                var tools = Model.IsEnableColVis ? "{extend: 'colvis', text: 'Columns'}," : string.Empty;
                tools += "'copy', 'excel', 'csv', 'pdf', 'print'";
                options[PropertyConst.Buttons] = new JRaw($"[{tools}]");
            }

            // Additional Option
            if (Model.AdditionalOptions.Any())
            {
                foreach (var jsOption in Model.AdditionalOptions)
                {
                    options[jsOption.Key] = new JRaw(jsOption.Value);
                }
            }
        }

        var dataTableOptions = @Html.Raw(options.ToString(Formatting.Indented));

        @if (Model.IsDevelopMode)
        {
            @Html.Raw("console.log('[DataTable] Config', dataTableOptions);")
        }

        var $dataTable = $table.dataTable(dataTableOptions);

        // Col filters
        @if (Model.IsUseColumnFilter)
        {
            @Html.Raw("$dataTable.columnFilter(" + Model.ColumnFilter + ");")
        }

        // Global Variable
        @if (!string.IsNullOrWhiteSpace(Model.GlobalJsVariableName))
        {
            @Html.Raw("window['" + Model.GlobalJsVariableName + "'] = $dataTable;")
        }
    })();
</script>