#region	License

//------------------------------------------------------------------------------------------------
// <Auto-generated>
//     <Author> Top Nguyen (http://topnguyen.net) </Author>
//     <Project> Monkey.Api </Project>
//     <File> 
//         <Name> Program.cs </Name>
//         <Created> 28 03 2017 10:19:01 AM </Created>
//         <Key> 29832439-583C-47C6-A80F-B93105D7109D </Key>
//     </File>
//     <Summary>
//         Program
//     </Summary>
// </Auto-generated>
//------------------------------------------------------------------------------------------------

#endregion License

using System;
using Microsoft.AspNetCore.Hosting;
using System.Runtime.InteropServices;
using System.Text;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.DataProtection;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.PlatformAbstractions;
using Monkey.Core;
using Monkey.Core.Configs;
using Monkey.Core.Constants;
using Monkey.Data;
using Monkey.Data.EF;
using Monkey.Data.EF.Factory;
using Monkey.Service;
using Puppy.Core.EnvironmentUtils;
using Puppy.Core.FileUtils;
using Puppy.DependencyInjection;
using Puppy.EF;

namespace Monkey
{
    public class Program
    {
        public static IWebHost BuildWebHost(string[] args)
            => WebHost
                .CreateDefaultBuilder(args)
                .UseStartup<Startup>()
                .Build();

        public static void Main(string[] args)
        {
            var host = BuildWebHost(args);

            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

            Console.Title = $"Welcome [{EnvironmentHelper.MachineName}], [{PlatformServices.Default.Application.ApplicationName}] App (v{PlatformServices.Default.Application.ApplicationVersion}) - Env [{EnvironmentHelper.Name}] | {PlatformServices.Default.Application.RuntimeFramework.FullName} | {RuntimeInformation.OSDescription}";

            // Build System Config at first time for config Root, in Startup will build again with reload update features
            var builder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);

            IConfiguration configuration = builder.Build();

            SystemConfigurationHelper.BuildSystemConfig(configuration);

            // Directories/Folders need to have
            DirectoryHelper.CreateIfNotExist(SystemUtils.GetWebPhysicalPath(PathConsts.UploadFolder));

            using (var scope = host.Services.CreateScope())
            {
                var services = scope.ServiceProvider;

                services.MigrateDatabase();

                services.Resolve<ISeedDataService>().SeedData();
            }

            host.Run();
        }
    }
}